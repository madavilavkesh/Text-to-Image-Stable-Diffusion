# -*- coding: utf-8 -*-
"""Text_to_Image_generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j8JkLew5l-SCWIaOUIf5eC2h0dlvQP9H


"""### Importing required libraries"""

from diffusers import StableDiffusionPipeline, EulerDiscreteScheduler, LMSDiscreteScheduler, \
    PNDMScheduler, DPMSolverMultistepScheduler, DDIMScheduler
import torch
import gradio as gr
from PIL import Image

"""### Load model pipeline"""

model_id = "stabilityai/stable-diffusion-2-1"
sd_pipeline = StableDiffusionPipeline.from_pretrained(
    model_id, torch_dtype=torch.float32
)
sd_pipeline.to("cpu")

"""### Defining multiple scheduler algorithms"""

schedulers = {
    "Euler Discrete": EulerDiscreteScheduler.from_pretrained(model_id, subfolder="scheduler"),
    "LMS Discrete": LMSDiscreteScheduler.from_pretrained(model_id, subfolder="scheduler"),
    "PNDM": PNDMScheduler.from_pretrained(model_id, subfolder="scheduler"),
    "DPM Solver Multistep": DPMSolverMultistepScheduler.from_pretrained(model_id, subfolder="scheduler"),
    "DDIM": DDIMScheduler.from_pretrained(model_id, subfolder="scheduler"),
}

"""### Image generating function"""

def generate_image(
    prompt,
    negative_prompt="",
    num_inference_steps=50,
    guidance_scale=7.5,
    height=512,
    width=512,
    batch_size=1,
    seed=None,
    scheduler="Euler Discrete",
):
    # Set the selected scheduler
    sd_pipeline.scheduler = schedulers.get(scheduler, sd_pipeline.scheduler)

    # Set seed for reproducibility
    generator = torch.manual_seed(seed) if seed else None

    # Generate images
    images = sd_pipeline(
        prompt=prompt,
        negative_prompt=negative_prompt,
        num_inference_steps=num_inference_steps,
        guidance_scale=guidance_scale,
        height=height,
        width=width,
        num_images_per_prompt=batch_size,
        generator=generator
    ).images

    return images  # Always return a list, even if batch_size = 1

"""### Gradio interface"""

interface = gr.Interface(
    fn=generate_image,
    inputs=[
        gr.Textbox(label="Prompt", info="Describe the image you want to generate."),
        gr.Textbox(label="Negative Prompt", info="Specify what to avoid in the image."),
        gr.Slider(step=1, minimum=1, maximum=100, value=50, label="Num Inference Steps",
                  info="Controls the number of denoising steps."),
        gr.Slider(step=0.1, minimum=1, maximum=20, value=7.5, label="Guidance Scale",
                  info="Higher values guide the image closer to the text prompt."),
        gr.Slider(step=64, minimum=256, maximum=1024, value=512, label="Height",
                  info="Set the height of the generated image."),
        gr.Slider(step=64, minimum=256, maximum=1024, value=512, label="Width",
                  info="Set the width of the generated image."),
        gr.Slider(step=1, minimum=1, maximum=4, value=1, label="Batch Size",
                  info="Generate multiple images at once (1-4)."),
        gr.Number(label="Seed", info="Set a seed for reproducibility (Optional)."),
        gr.Dropdown(
            choices=["Euler Discrete", "LMS Discrete", "PNDM", "DPM Solver Multistep", "DDIM"],
            value="Euler Discrete",
            label="Scheduler Algorithm",
            info="Choose the denoising algorithm used for image generation."
        ),
    ],
    outputs=gr.Gallery(label="Generated Images"),
    title="Gen AI Text-to-Image Generator using Stable Diffusion",
    description="Generate AI images from text with customizable settings(parameters).",
)

# Launch Gradio App
interface.launch(share=True, debug=True)

